From 3f16ece970a05a340e0c7bfa907c159de96d21b0 Mon Sep 17 00:00:00 2001
From: the-snowwhite <producer@holotronic.dk>
Date: Sun, 26 Jun 2016 11:48:25 +0200
Subject: [PATCH 01/13] add ext4 root fs support and autofs4 module

Signed-off-by: Michael Brown <mib@localhost.localdomain>
Signed-off-by: Michael Brown <producer@holotronic.dk>
Signed-off-by: the-snowwhite <producer@holotronic.dk>
Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index 01e6811..1fb717a 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -11,7 +11,7 @@ CONFIG_EMBEDDED=y
 CONFIG_PROFILING=y
 CONFIG_MODULES=y
 CONFIG_MODULE_UNLOAD=y
-# CONFIG_LBDAF is not set
+CONFIG_LBDAF=y
 # CONFIG_BLK_DEV_BSG is not set
 # CONFIG_IOSCHED_DEADLINE is not set
 # CONFIG_IOSCHED_CFQ is not set
@@ -139,6 +139,9 @@ CONFIG_EXT2_FS_XATTR=y
 CONFIG_EXT2_FS_POSIX_ACL=y
 CONFIG_EXT3_FS=y
 CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_XATTR=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
 # CONFIG_DNOTIFY is not set
 CONFIG_VFAT_FS=y
 CONFIG_NTFS_FS=y
@@ -146,6 +149,7 @@ CONFIG_NTFS_RW=y
 CONFIG_TMPFS=y
 CONFIG_JFFS2_FS=y
 CONFIG_NFS_FS=y
+CONFIG_AUTOFS4_FS=y
 CONFIG_NFS_V4=y
 CONFIG_ROOT_NFS=y
 CONFIG_NLS_CODEPAGE_437=y
-- 
2.7.4


From 79d3fd4df2a95827cbf6a28260949181fbb1665c Mon Sep 17 00:00:00 2001
From: the-snowwhite <producer@holotronic.dk>
Date: Sun, 26 Jun 2016 11:52:00 +0200
Subject: [PATCH 02/13] add uio driver support

Signed-off-by: Michael Brown <mib@localhost.localdomain>
Signed-off-by: Michael Brown <producer@holotronic.dk>
Signed-off-by: the-snowwhite <producer@holotronic.dk>
Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index 1fb717a..cef8170 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -162,3 +162,6 @@ CONFIG_DETECT_HUNG_TASK=y
 CONFIG_FUNCTION_TRACER=y
 CONFIG_DEBUG_USER=y
 CONFIG_XZ_DEC=y
+CONFIG_UIO=y
+CONFIG_UIO_PDRV=m
+CONFIG_UIO_PDRV_GENIRQ=m
-- 
2.7.4


From 105363bb7704da6662cbc73bcb8ac199783c478f Mon Sep 17 00:00:00 2001
From: the-snowwhite <producer@holotronic.dk>
Date: Sun, 26 Jun 2016 11:55:33 +0200
Subject: [PATCH 03/13] add configfs and fpgacfg dts entities, and dynamic dts
 overlay support options

Signed-off-by: Michael Brown <mib@localhost.localdomain>
Signed-off-by: Michael Brown <producer@holotronic.dk>
Signed-off-by: the-snowwhite <producer@holotronic.dk>
Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index cef8170..d7fc496 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -165,3 +165,5 @@ CONFIG_XZ_DEC=y
 CONFIG_UIO=y
 CONFIG_UIO_PDRV=m
 CONFIG_UIO_PDRV_GENIRQ=m
+CONFIG_CONFIGFS_FS=y
+CONFIG_OF_OVERLAY=y
-- 
2.7.4


From e14950cd810a3e0eab1d96f98d7d17579c537b4b Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Wed, 29 Jun 2016 19:05:21 +0200
Subject: [PATCH 04/13] add socfpga .dtb files to kernel-image .deb, and
 install in folder /boot/dtb

Signed-off-by: Michael Brown <producer@holotronic.dk>
Signed-off-by: the-snowwhite <producer@holotronic.dk>
Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 scripts/package/builddeb | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/scripts/package/builddeb b/scripts/package/builddeb
index 88dbf23..67770e9 100755
--- a/scripts/package/builddeb
+++ b/scripts/package/builddeb
@@ -110,7 +110,7 @@ BUILD_DEBUG="$(grep -s '^CONFIG_DEBUG_INFO=y' $KCONFIG_CONFIG || true)"
 # Setup the directory structure
 rm -rf "$tmpdir" "$fwdir" "$kernel_headers_dir" "$libc_headers_dir" "$dbg_dir"
 mkdir -m 755 -p "$tmpdir/DEBIAN"
-mkdir -p  "$tmpdir/lib" "$tmpdir/boot" "$tmpdir/usr/share/doc/$packagename"
+mkdir -p  "$tmpdir/lib" "$tmpdir/boot/dtb" "$tmpdir/usr/share/doc/$packagename"
 mkdir -m 755 -p "$fwdir/DEBIAN"
 mkdir -p "$fwdir/lib/firmware/$version/" "$fwdir/usr/share/doc/$fwpackagename"
 mkdir -m 755 -p "$libc_headers_dir/DEBIAN"
@@ -139,8 +139,10 @@ fi
 # Not all arches include the boot path in KBUILD_IMAGE
 if [ -e $KBUILD_IMAGE ]; then
 	cp $KBUILD_IMAGE "$tmpdir/$installed_image_path"
+	cp dts/*.dtb "$tmpdir/boot/dtb"
 else
 	cp arch/$ARCH/boot/$KBUILD_IMAGE "$tmpdir/$installed_image_path"
+	cp arch/$ARCH/boot/dts/*.dtb "$tmpdir/boot/dtb"
 fi
 
 if grep -q '^CONFIG_MODULES=y' $KCONFIG_CONFIG ; then
-- 
2.7.4


From 620ad4fbd373e12feff64d4da0e821ea8fa8deed Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 1 Aug 2016 09:10:28 +0200
Subject: [PATCH 05/13] disable CONFIG_LOCALVERSION_AUTO for consistant
 apt-updatable kernelversion name

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 1 +
 1 file changed, 1 insertion(+)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index d7fc496..84dbda7 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -167,3 +167,4 @@ CONFIG_UIO_PDRV=m
 CONFIG_UIO_PDRV_GENIRQ=m
 CONFIG_CONFIGFS_FS=y
 CONFIG_OF_OVERLAY=y
+CONFIG_LOCALVERSION_AUTO=n
-- 
2.7.4


From aaa7589b4a3aafc56b91e41055af6e9c5da29a32 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 1 Aug 2016 09:13:51 +0200
Subject: [PATCH 06/13] enable jumboframes maxmtu=9000

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/boot/dts/socfpga_cyclone5_de0_sockit.dts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/arch/arm/boot/dts/socfpga_cyclone5_de0_sockit.dts b/arch/arm/boot/dts/socfpga_cyclone5_de0_sockit.dts
index 555e9ca..5b79c0c 100644
--- a/arch/arm/boot/dts/socfpga_cyclone5_de0_sockit.dts
+++ b/arch/arm/boot/dts/socfpga_cyclone5_de0_sockit.dts
@@ -69,7 +69,7 @@
 	rxdv-skew-ps = <420>; /* 0ps */
 	rxc-skew-ps = <1680>; /* 780ps */
 
-	max-frame-size = <3800>;
+	max-frame-size = <9000>;
 };
 
 &gpio0 {
-- 
2.7.4


From af034d1c18fec7733a7972dc9a9e85c847af64de Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 1 Aug 2016 09:18:11 +0200
Subject: [PATCH 07/13] enable initramfs

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index 84dbda7..2e7f062 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -168,3 +168,13 @@ CONFIG_UIO_PDRV_GENIRQ=m
 CONFIG_CONFIGFS_FS=y
 CONFIG_OF_OVERLAY=y
 CONFIG_LOCALVERSION_AUTO=n
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_INITRAMFS_SOURCE=""
+CONFIG_INITRAMFS_ROOT_UID=0
+CONFIG_INITRAMFS_ROOT_GID=0
+CONFIG_RD_GZIP=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_RD_XZ=y
+CONFIG_RD_LZO=y
+CONFIG_RD_LZ4=y
-- 
2.7.4


From 5063a36f461b84771cede8f5fb1108d66399ddc6 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 1 Aug 2016 09:18:41 +0200
Subject: [PATCH 08/13] disable debug package gen

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index 2e7f062..82264b9 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -155,7 +155,7 @@ CONFIG_ROOT_NFS=y
 CONFIG_NLS_CODEPAGE_437=y
 CONFIG_NLS_ISO8859_1=y
 CONFIG_PRINTK_TIME=y
-CONFIG_DEBUG_INFO=y
+CONFIG_DEBUG_INFO=n
 CONFIG_MAGIC_SYSRQ=y
 CONFIG_DETECT_HUNG_TASK=y
 # CONFIG_SCHED_DEBUG is not set
-- 
2.7.4


From 9f4231f51611126ece02e841d1f3520106544d3f Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 1 Aug 2016 19:32:34 +0200
Subject: [PATCH 09/13] enable alt vip framebuffer in kernel

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index 82264b9..b8b8216f 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -178,3 +178,21 @@ CONFIG_RD_LZMA=y
 CONFIG_RD_XZ=y
 CONFIG_RD_LZO=y
 CONFIG_RD_LZ4=y
+CONFIG_VT_HW_CONSOLE_BINDING=y
+CONFIG_FB=y
+CONFIG_FB_CFB_FILLRECT=y
+CONFIG_FB_CFB_COPYAREA=y
+CONFIG_FB_CFB_IMAGEBLIT=y
+CONFIG_FB_ALTERA_VIP=y
+CONFIG_VGACON_SOFT_SCROLLBACK=y
+CONFIG_VGACON_SOFT_SCROLLBACK_SIZE=64
+CONFIG_FRAMEBUFFER_CONSOLE=y
+CONFIG_FRAMEBUFFER_CONSOLE_ROTATION=y
+CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
+CONFIG_LOGO=y
+CONFIG_LOGO_LINUX_MONO=y
+CONFIG_LOGO_LINUX_VGA16=y
+CONFIG_LOGO_LINUX_CLUT224=y
+CONFIG_FONT_SUPPORT=y
+CONFIG_FONT_8x8=y
+CONFIG_FONT_8x16=y
-- 
2.7.4


From 7e7f8799ef5118b2534815d0737fef479d0362f2 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Thu, 4 Aug 2016 19:09:30 +0200
Subject: [PATCH 10/13] increase max framebuffersize twice above 4MB(fixes more
 than 1024x768x8 resolution), and enable cma

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/Kconfig                   |  6 +++---
 arch/arm/configs/socfpga_defconfig | 10 +++++++++-
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index e16a259..7d02aef 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1687,10 +1687,10 @@ source "mm/Kconfig"
 
 config FORCE_MAX_ZONEORDER
 	int "Maximum zone order" if ARCH_SHMOBILE_LEGACY
-	range 11 64 if ARCH_SHMOBILE_LEGACY
-	default "12" if SOC_AM33XX
+	range 11 64 if ARCH_SHMOBILE_LEGACY || ARCH_SOCFPGA
+	range 11 64 if SOC_AM33XX || ARCH_SOCFPGA
 	default "9" if SA1111 || ARCH_EFM32
-	default "11"
+	default "13"
 	help
 	  The kernel memory allocator divides physically contiguous memory
 	  blocks into "zones", where each zone is a power of two number of
diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index b8b8216f..aa104e2 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -187,7 +187,6 @@ CONFIG_FB_ALTERA_VIP=y
 CONFIG_VGACON_SOFT_SCROLLBACK=y
 CONFIG_VGACON_SOFT_SCROLLBACK_SIZE=64
 CONFIG_FRAMEBUFFER_CONSOLE=y
-CONFIG_FRAMEBUFFER_CONSOLE_ROTATION=y
 CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
 CONFIG_LOGO=y
 CONFIG_LOGO_LINUX_MONO=y
@@ -196,3 +195,12 @@ CONFIG_LOGO_LINUX_CLUT224=y
 CONFIG_FONT_SUPPORT=y
 CONFIG_FONT_8x8=y
 CONFIG_FONT_8x16=y
+CONFIG_FORCE_MAX_ZONEORDER=13
+CONFIG_DMA_CMA=y
+CONFIG_MEMORY_ISOLATION=y
+CONFIG_CMA=y
+CONFIG_CMA_DEBUG=y
+CONFIG_CMA_SIZE_MBYTES=512
+CONFIG_CMA_SIZE_SEL_MBYTES=y
+CONFIG_CMA_ALIGNMENT=8
+CONFIG_CMA_AREAS=7
-- 
2.7.4


From d804a4025403e228e420dc326af04e7a0ffe7395 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Sat, 6 Aug 2016 15:49:31 +0200
Subject: [PATCH 11/13] add generate /boot/uEnv.txt containing kernel info for
 uboot probing

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 scripts/package/builddeb | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/scripts/package/builddeb b/scripts/package/builddeb
index 67770e9..3e0abd0 100755
--- a/scripts/package/builddeb
+++ b/scripts/package/builddeb
@@ -183,6 +183,13 @@ if grep -q '^CONFIG_BLK_DEV_INITRD=y' $KCONFIG_CONFIG; then
 else
 	want_initrd=No
 fi
+ 
+# create uEnv.txt containing current kernelversio in /boot folder (for u-boot probing)
+	cat <<EOF > "$tmpdir/boot/uEnv.txt"
+kver=${version}
+initrd_installed=$want_initrd
+EOF
+
 for script in postinst postrm preinst prerm ; do
 	mkdir -p "$tmpdir$debhookdir/$script.d"
 	cat <<EOF > "$tmpdir/DEBIAN/$script"
-- 
2.7.4


From 6f2a7d27d164288f78fa1329c0644dac2f373d80 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Sun, 7 Aug 2016 00:33:02 +0200
Subject: [PATCH 12/13] changed alt_vip_fb to module added opencores fb driver,
 plus some sound and mm related drivers added

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig | 71 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 70 insertions(+), 1 deletion(-)

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index aa104e2..8eae8c0 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -180,10 +180,18 @@ CONFIG_RD_LZO=y
 CONFIG_RD_LZ4=y
 CONFIG_VT_HW_CONSOLE_BINDING=y
 CONFIG_FB=y
+CONFIG_FB_BOOT_VESA_SUPPORT=y
 CONFIG_FB_CFB_FILLRECT=y
 CONFIG_FB_CFB_COPYAREA=y
 CONFIG_FB_CFB_IMAGEBLIT=y
-CONFIG_FB_ALTERA_VIP=y
+CONFIG_FB_BOOT_VESA_SUPPORT=y
+CONFIG_FB_FOREIGN_ENDIAN=y
+CONFIG_FB_BOTH_ENDIAN=y
+CONFIG_FB_MODE_HELPERS=y
+CONFIG_FB_ALTERA_VIP=m
+CONFIG_FB_VESA=y
+CONFIG_FB_OPENCORES=m
+CONFIG_FB_SIMPLE=y
 CONFIG_VGACON_SOFT_SCROLLBACK=y
 CONFIG_VGACON_SOFT_SCROLLBACK_SIZE=64
 CONFIG_FRAMEBUFFER_CONSOLE=y
@@ -204,3 +212,64 @@ CONFIG_CMA_SIZE_MBYTES=512
 CONFIG_CMA_SIZE_SEL_MBYTES=y
 CONFIG_CMA_ALIGNMENT=8
 CONFIG_CMA_AREAS=7
+CONFIG_REGMAP_I2C=m
+CONFIG_REGMAP_SPI=m
+CONFIG_MEDIA_SUPPORT=m
+CONFIG_MEDIA_RC_SUPPORT=y
+CONFIG_VIDEO_ADV_DEBUG=y
+CONFIG_RC_CORE=m
+CONFIG_RC_MAP=m
+CONFIG_RC_DECODERS=y
+CONFIG_IR_NEC_DECODER=m
+CONFIG_IR_RC5_DECODER=m
+CONFIG_IR_RC6_DECODER=m
+CONFIG_IR_JVC_DECODER=m
+CONFIG_IR_SONY_DECODER=m
+CONFIG_IR_SANYO_DECODER=m
+CONFIG_IR_SHARP_DECODER=m
+CONFIG_IR_MCE_KBD_DECODER=m
+CONFIG_IR_XMP_DECODER=m
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_VGA_ARB=y
+CONFIG_VGA_ARB_MAX_GPUS=16
+CONFIG_SOUND=m
+CONFIG_SOUND_OSS_CORE=y
+CONFIG_SOUND_OSS_CORE_PRECLAIM=y
+CONFIG_SND=m
+CONFIG_SND_TIMER=m
+CONFIG_SND_PCM=m
+CONFIG_SND_COMPRESS_OFFLOAD=m
+CONFIG_SND_JACK=y
+CONFIG_SND_SEQUENCER=m
+CONFIG_SND_OSSEMUL=y
+CONFIG_SND_MIXER_OSS=m
+CONFIG_SND_PCM_OSS=m
+CONFIG_SND_PCM_OSS_PLUGINS=y
+CONFIG_SND_SEQUENCER_OSS=y
+CONFIG_SND_SUPPORT_OLD_API=y
+CONFIG_SND_VERBOSE_PROCFS=y
+CONFIG_SND_VERBOSE_PRINTK=y
+CONFIG_SND_DMA_SGBUF=y
+CONFIG_SND_DRIVERS=y
+CONFIG_SND_PCI=y
+CONFIG_SND_SPI=y
+CONFIG_SND_USB=y
+CONFIG_SND_SOC=m
+CONFIG_SND_ATMEL_SOC=m
+CONFIG_SND_SST_MFLD_PLATFORM=m
+CONFIG_SND_SST_IPC=m
+CONFIG_SND_SST_IPC_ACPI=m
+CONFIG_SND_SOC_INTEL_BYTCR_RT5640_MACH=m
+CONFIG_SND_SOC_I2C_AND_SPI=m
+CONFIG_SND_SOC_HDMI_CODEC=m
+CONFIG_SND_SOC_RL6231=m
+CONFIG_SND_SOC_RT5640=m
+CONFIG_SND_SOC_SIGMADSP=m
+CONFIG_SND_SOC_SIGMADSP_I2C=m
+CONFIG_SND_SOC_SPDIF=m
+CONFIG_SND_SOC_SSM2602=m
+CONFIG_SND_SOC_SSM2602_SPI=m
+CONFIG_SND_SOC_SSM2602_I2C=m
+CONFIG_HIDRAW=y
+CONFIG_HID_PID=y
+CONFIG_USB_HIDDEV=y
-- 
2.7.4


From 94ce52d96244f1a84a7fab1814c659ca266e8fb8 Mon Sep 17 00:00:00 2001
From: Michael Brown <producer@holotronic.dk>
Date: Mon, 8 Aug 2016 02:50:00 +0200
Subject: [PATCH 13/13] re-add altfb and config changes

Signed-off-by: Michael Brown <producer@holotronic.dk>
---
 arch/arm/configs/socfpga_defconfig |  18 +-
 drivers/video/fbdev/Kconfig        |  10 +
 drivers/video/fbdev/Makefile       |   1 +
 drivers/video/fbdev/altfb.c        | 484 +++++++++++++++++++++++++++++++++++++
 4 files changed, 508 insertions(+), 5 deletions(-)
 create mode 100755 drivers/video/fbdev/altfb.c

diff --git a/arch/arm/configs/socfpga_defconfig b/arch/arm/configs/socfpga_defconfig
index 8eae8c0..413340b 100644
--- a/arch/arm/configs/socfpga_defconfig
+++ b/arch/arm/configs/socfpga_defconfig
@@ -180,18 +180,24 @@ CONFIG_RD_LZO=y
 CONFIG_RD_LZ4=y
 CONFIG_VT_HW_CONSOLE_BINDING=y
 CONFIG_FB=y
+CONFIG_FB_ALTERA_VGA=y
 CONFIG_FB_BOOT_VESA_SUPPORT=y
 CONFIG_FB_CFB_FILLRECT=y
 CONFIG_FB_CFB_COPYAREA=y
 CONFIG_FB_CFB_IMAGEBLIT=y
 CONFIG_FB_BOOT_VESA_SUPPORT=y
-CONFIG_FB_FOREIGN_ENDIAN=y
-CONFIG_FB_BOTH_ENDIAN=y
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+CONFIG_PWM=y
+CONFIG_PWM_SYSFS=y
+CONFIG_FB_SSD1307=y
+CONFIG_FRAMEBUFFER_CONSOLE_ROTATION=y
+CONFIG_FB_SYS_FOPS=y
+CONFIG_FB_DEFERRED_IO=y
 CONFIG_FB_MODE_HELPERS=y
-CONFIG_FB_ALTERA_VIP=m
+##CONFIG_FB_ALTERA_VIP=m
 CONFIG_FB_VESA=y
-CONFIG_FB_OPENCORES=m
-CONFIG_FB_SIMPLE=y
+##CONFIG_FB_OPENCORES=m
+##CONFIG_FB_SIMPLE=y
 CONFIG_VGACON_SOFT_SCROLLBACK=y
 CONFIG_VGACON_SOFT_SCROLLBACK_SIZE=64
 CONFIG_FRAMEBUFFER_CONSOLE=y
@@ -273,3 +279,5 @@ CONFIG_SND_SOC_SSM2602_I2C=m
 CONFIG_HIDRAW=y
 CONFIG_HID_PID=y
 CONFIG_USB_HIDDEV=y
+CONFIG_FB_DE1_SOC=y
+CONFIG_STAGING=y
diff --git a/drivers/video/fbdev/Kconfig b/drivers/video/fbdev/Kconfig
index b6330e2..5970a3a 100644
--- a/drivers/video/fbdev/Kconfig
+++ b/drivers/video/fbdev/Kconfig
@@ -224,6 +224,16 @@ config FB_TILEBLITTING
 comment "Frame buffer hardware drivers"
 	depends on FB
 
+config FB_ALTERA_VGA
+	tristate "Altera framebuffer support"
+	depends on FB && EMBEDDED
+	select FB_CFB_FILLRECT
+	select FB_CFB_COPYAREA
+	select FB_CFB_IMAGEBLIT
+	help
+	  This is the frame buffer driver for the VGA controller
+	  in Altera Nios forum and the video pipeline of NEEK.
+
 config FB_ALTERA_VIP
 	tristate "Altera VIP Frame Reader framebuffer support"
 	depends on FB
diff --git a/drivers/video/fbdev/Makefile b/drivers/video/fbdev/Makefile
index ce8b02d..fa5a745 100644
--- a/drivers/video/fbdev/Makefile
+++ b/drivers/video/fbdev/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_FB_MACMODES)      += macmodes.o
 obj-$(CONFIG_FB_WMT_GE_ROPS)   += wmt_ge_rops.o
 
 # Hardware specific drivers go first
+obj-$(CONFIG_FB_ALTERA_VGA)  	  += altfb.o
 obj-$(CONFIG_FB_ALTERA_VIP)	  += altvipfb.o
 obj-$(CONFIG_FB_AMIGA)            += amifb.o c2p_planar.o
 obj-$(CONFIG_FB_ARC)              += arcfb.o
diff --git a/drivers/video/fbdev/altfb.c b/drivers/video/fbdev/altfb.c
new file mode 100755
index 0000000..53875eb
--- /dev/null
+++ b/drivers/video/fbdev/altfb.c
@@ -0,0 +1,484 @@
+/*
+ *  altfb.c -- Altera framebuffer driver
+ *
+ *  Based on vfb.c -- Virtual frame buffer device
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/dma-mapping.h>
+#include <linux/platform_device.h>
+#include <linux/fb.h>
+#include <linux/init.h>
+
+
+struct altfb_type;
+
+struct altfb_dev {
+    struct altfb_type *type;
+    struct platform_device *pdev;
+    struct fb_info *info;
+    struct resource *reg_res;
+    void __iomem *base;
+    int mem_word_width;
+    void *priv;
+};
+
+struct altfb_type {
+    const char *name;
+    int (*of_setup)(struct altfb_dev *fbdev);
+    int (*start_hw)(struct altfb_dev *fbdev);
+};
+
+
+/*
+ *  RAM we reserve for the frame buffer. This defines the maximum screen
+ *  size
+ *
+ *  The default can be overridden if the driver is compiled as a module
+ */
+
+static struct fb_var_screeninfo altfb_default = {
+	.activate = FB_ACTIVATE_NOW,
+	.height = -1,
+	.width = -1,
+	.vmode = FB_VMODE_NONINTERLACED,
+};
+
+static struct fb_fix_screeninfo altfb_fix = {
+	.id = "altfb",
+	.type = FB_TYPE_PACKED_PIXELS,
+	.visual = FB_VISUAL_TRUECOLOR,
+	.accel = FB_ACCEL_NONE,
+};
+
+static int altfb_setcolreg(unsigned regno, unsigned red, unsigned green,
+			   unsigned blue, unsigned transp, struct fb_info *info)
+{
+	/*
+	 *  Set a single color register. The values supplied have a 32/16 bit
+	 *  magnitude.
+	 *  Return != 0 for invalid regno.
+	 */
+
+	if (regno > 255)
+		return 1;
+
+    if(info->var.bits_per_pixel == 16) {
+	    red >>= 11;
+	    green >>= 10;
+	    blue >>= 11;
+
+	    if (regno < 255) {
+		    ((u32 *) info->pseudo_palette)[regno] = ((red & 31) << 11) |
+		        ((green & 63) << 5) | (blue & 31);
+	    }
+    } else {
+	    red >>= 8;
+	    green >>= 8;
+	    blue >>= 8;
+
+	    if (regno < 255) {
+		    ((u32 *) info->pseudo_palette)[regno] = ((red & 255) << 16) |
+		        ((green & 255) << 8) | (blue & 255);
+	    }
+    }
+
+	return 0;
+}
+
+static struct fb_ops altfb_ops = {
+	.owner = THIS_MODULE,
+	.fb_fillrect = cfb_fillrect,
+	.fb_copyarea = cfb_copyarea,
+	.fb_imageblit = cfb_imageblit,
+	.fb_setcolreg = altfb_setcolreg,
+};
+
+/*
+ *  Initialization - SGDMA Based
+ */
+static int of_setup_sgdma(struct altfb_dev *fbdev)
+{
+	const __be32* val;
+
+	val = of_get_property(fbdev->pdev->dev.of_node, "width", NULL);
+	if (!val) {
+		dev_err(&fbdev->pdev->dev, "Missing required parameter 'width'");
+		return -ENODEV;
+	}
+
+	fbdev->info->var.xres = be32_to_cpup(val),
+	fbdev->info->var.xres_virtual = fbdev->info->var.xres,
+
+	val = of_get_property(fbdev->pdev->dev.of_node, "height", NULL);
+	if (!val) {
+		dev_err(&fbdev->pdev->dev, "Missing required parameter 'height'");
+		return -ENODEV;
+	}
+
+	fbdev->info->var.yres = be32_to_cpup(val);
+	fbdev->info->var.yres_virtual = fbdev->info->var.yres;
+
+	val = of_get_property(fbdev->pdev->dev.of_node, "bpp", NULL);
+	if (!val) {
+		dev_err(&fbdev->pdev->dev, "Missing required parameter 'bpp'");
+		return -ENODEV;
+	}
+
+	fbdev->info->var.bits_per_pixel = be32_to_cpup(val);
+	if(fbdev->info->var.bits_per_pixel == 24) {
+		dev_info(&fbdev->pdev->dev, "BPP is set to 24. Using 32 to align to 16bit addresses");
+		fbdev->info->var.bits_per_pixel = 32;
+	}
+	return 0;
+}
+#define ALTERA_SGDMA_IO_EXTENT 0x400
+
+#define ALTERA_SGDMA_STATUS 0
+#define ALTERA_SGDMA_STATUS_BUSY_MSK (0x10)
+
+#define ALTERA_SGDMA_CONTROL 16
+#define ALTERA_SGDMA_CONTROL_RUN_MSK  (0x20)
+#define ALTERA_SGDMA_CONTROL_SOFTWARERESET_MSK (0X10000)
+#define ALTERA_SGDMA_CONTROL_PARK_MSK (0X20000)
+
+#define ALTERA_SGDMA_NEXT_DESC_POINTER 32
+
+/* SGDMA can only transfer this many bytes per descriptor */
+#define DISPLAY_BYTES_PER_DESC 0xFF00UL
+#define ALTERA_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK (0x1)
+#define ALTERA_SGDMA_DESCRIPTOR_CONTROL_GENERATE_SOP_MSK (0x4)
+#define ALTERA_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK (0x80)
+#define DISPLAY_DESC_COUNT(len) (((len) + DISPLAY_BYTES_PER_DESC - 1) \
+				/ DISPLAY_BYTES_PER_DESC)
+#define DISPLAY_DESC_SIZE(len) (DISPLAY_DESC_COUNT(len) \
+				* sizeof(struct sgdma_desc))
+
+struct sgdma_desc {
+	u32 read_addr;
+	u32 read_addr_pad;
+
+	u32 write_addr;
+	u32 write_addr_pad;
+
+	u32 next;
+	u32 next_pad;
+
+	u16 bytes_to_transfer;
+	u8 read_burst;
+	u8 write_burst;
+
+	u16 actual_bytes_transferred;
+	u8 status;
+	u8 control;
+
+} __attribute__ ((packed));
+
+static int start_sgdma_hw(struct altfb_dev *fbdev) {
+	unsigned long first_desc_phys, next_desc_phys;
+	unsigned ctrl = ALTERA_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK;
+    unsigned long start = fbdev->info->fix.smem_start;
+    unsigned long len = fbdev->info->fix.smem_len;
+    struct sgdma_desc *desc;
+	struct sgdma_desc *descp = dma_alloc_coherent(NULL,
+					DISPLAY_DESC_SIZE(fbdev->info->fix.smem_len),
+					(void*)&first_desc_phys, GFP_KERNEL);
+    if(!descp) {
+        dev_err(&fbdev->pdev->dev, "Failed to allocate SGDMA descriptor memory\n");
+        return -ENOMEM;
+    }
+	writel(ALTERA_SGDMA_CONTROL_SOFTWARERESET_MSK, \
+	       fbdev->base + ALTERA_SGDMA_CONTROL);	/* halt current transfer */
+	writel(0, fbdev->base + ALTERA_SGDMA_CONTROL);	/* disable interrupts */
+	writel(0xff, fbdev->base + ALTERA_SGDMA_STATUS);	/* clear status */
+	writel(first_desc_phys, fbdev->base + ALTERA_SGDMA_NEXT_DESC_POINTER);
+
+    next_desc_phys = first_desc_phys;
+    desc = descp;
+	while (len) {
+		unsigned long cc = min(len, DISPLAY_BYTES_PER_DESC);
+		next_desc_phys += sizeof(struct sgdma_desc);
+		desc->read_addr = start;
+		desc->next = next_desc_phys;
+		desc->bytes_to_transfer = cc;
+		desc->control = ctrl;
+		start += cc;
+		len -= cc;
+		desc++;
+	}
+
+	desc--;
+	desc->next = first_desc_phys;
+	desc->control = ctrl | ALTERA_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK;
+	desc = descp;
+	desc->control = ctrl | ALTERA_SGDMA_DESCRIPTOR_CONTROL_GENERATE_SOP_MSK;
+	writel(ALTERA_SGDMA_CONTROL_RUN_MSK | ALTERA_SGDMA_CONTROL_PARK_MSK, \
+	       fbdev->base + ALTERA_SGDMA_CONTROL);	/* start */
+	return 0;
+}
+/*
+ *  Initialization - VIPFrameReader Based
+ */
+#define SDRREGS_BASE        0xFFC20000
+#define SDRREGS_EXTENT      0x000E0000
+#define FPGA2SDRAM_ADDR     0x00005080
+#define FPGA2SDRAM_TRUE     0x00003FFF 
+
+
+#define PACKET_BANK_ADDRESSOFFSET 12
+#define PB0_BASE_ADDRESSOFFSET 16
+#define PB0_WORDS_ADDRESSOFFSET 20
+#define PB0_SAMPLES_ADDRESSOFFSET 24
+#define PB0_WIDTH_ADDRESSOFFSET 32
+#define PB0_HEIGHT_ADDRESSOFFSET 36
+#define PB0_INTERLACED_ADDRESSOFFSET 40
+
+#define VIPFR_GO 0
+
+static int of_setup_vipfr(struct altfb_dev *fbdev) {
+	const __be32* val;
+
+	val = of_get_property(fbdev->pdev->dev.of_node, "max-width", NULL);
+	if (!val) {
+		dev_err(&fbdev->pdev->dev, "Missing required parameter 'max-width'");
+		return -ENODEV;
+	}
+
+	fbdev->info->var.xres = be32_to_cpup(val),
+	fbdev->info->var.xres_virtual = fbdev->info->var.xres,
+
+	val = of_get_property(fbdev->pdev->dev.of_node, "max-height", NULL);
+	if (!val) {
+		dev_err(&fbdev->pdev->dev, "Missing required parameter 'max-height'");
+		return -ENODEV;
+	}
+
+	fbdev->info->var.yres = be32_to_cpup(val);
+	fbdev->info->var.yres_virtual = fbdev->info->var.yres;
+
+	val = of_get_property(fbdev->pdev->dev.of_node, "bits-per-color", NULL);
+	if (!val) {
+		dev_err(&fbdev->pdev->dev, "Missing required parameter 'bits-per-color'");
+		return -ENODEV;
+	}
+
+	fbdev->info->var.bits_per_pixel = be32_to_cpup(val);
+	if(be32_to_cpup(val) != 8) {
+		dev_err(&fbdev->pdev->dev, "bits-per-color is set to %i. Curently only 8 is supported.",be32_to_cpup(val));
+		return -ENODEV;
+	}
+	fbdev->info->var.bits_per_pixel = 32;
+
+	val = of_get_property(fbdev->pdev->dev.of_node, "mem-word-width", NULL);
+	if (!val) {
+		dev_err(&fbdev->pdev->dev, "Missing required parameter 'mem-word-width'");
+		return -ENODEV;
+	}
+	fbdev->mem_word_width = be32_to_cpup(val);
+	if(!(fbdev->mem_word_width >= 32 && fbdev->mem_word_width % 32 == 0)) {
+		dev_err(&fbdev->pdev->dev, "mem-word-width is set to %i. must be >= 32 and multiple of 32.",fbdev->mem_word_width);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+static int start_vipfr_hw(struct altfb_dev *fbdev) {	
+    unsigned long base;
+    base = (unsigned long)ioremap(SDRREGS_BASE, SDRREGS_EXTENT);
+    writel(FPGA2SDRAM_TRUE,    (base + FPGA2SDRAM_ADDR));
+    writel(fbdev->info->fix.smem_start, fbdev->base + PB0_BASE_ADDRESSOFFSET);
+    writel(fbdev->info->var.xres * fbdev->info->var.yres/(fbdev->mem_word_width/32), \
+            fbdev->base + PB0_WORDS_ADDRESSOFFSET);
+    writel(fbdev->info->var.xres * fbdev->info->var.yres, \
+            fbdev->base + PB0_SAMPLES_ADDRESSOFFSET);
+    writel(fbdev->info->var.xres, fbdev->base + PB0_WIDTH_ADDRESSOFFSET);
+    writel(fbdev->info->var.yres, fbdev->base + PB0_HEIGHT_ADDRESSOFFSET);
+    writel(3, fbdev->base + PB0_INTERLACED_ADDRESSOFFSET);
+    writel(0, fbdev->base + PACKET_BANK_ADDRESSOFFSET);
+    //Go
+    writel(1, fbdev->base);
+
+    return 0;
+}
+
+/*
+ *  Initialization - General
+ */
+static struct altfb_type altfb_sgdma = {
+    .name = "SGDMA with video_sync_generator",
+    .of_setup = of_setup_sgdma,
+    .start_hw = start_sgdma_hw,
+};
+
+static struct altfb_type altfb_vipfr = {
+    .name = "ALTVIP FrameReader",
+    .of_setup = of_setup_vipfr,
+    .start_hw = start_vipfr_hw,
+};
+
+static struct of_device_id altfb_match[] = {
+	{ .compatible = "ALTR,altfb-12.1", .data = &altfb_sgdma },
+	{ .compatible = "ALTR,altfb-1.0",  .data = &altfb_sgdma },
+	{ .compatible = "ALTR,vip-frame-reader-9.1",  .data = &altfb_vipfr },
+	{},
+};
+MODULE_DEVICE_TABLE(of, altfb_match);
+
+static int altfb_probe(struct platform_device *pdev)
+{
+	struct fb_info *info;
+	int retval = -ENOMEM;
+	void *fbmem_virt;
+    struct altfb_dev *fbdev;
+    const struct of_device_id *match;
+
+    match = of_match_node(altfb_match, pdev->dev.of_node);
+    if(!match)
+        return -ENODEV;
+
+    fbdev = kzalloc(sizeof(struct altfb_dev), GFP_KERNEL);
+    if(!fbdev)
+        return -ENOMEM;
+
+    fbdev->pdev = pdev;
+    fbdev->type = match->data;
+
+	fbdev->reg_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!fbdev->reg_res)
+	    goto err;
+
+	info = framebuffer_alloc(sizeof(u32) * 256, &pdev->dev);
+	if (!info)
+		goto err;
+
+    fbdev->info = info;
+	info->fbops = &altfb_ops;
+	info->var = altfb_default;
+	info->fix = altfb_fix;
+
+    if(fbdev->type->of_setup(fbdev))
+       goto err1;
+
+	if(info->var.bits_per_pixel == 16) {
+		info->var.red.offset = 11;
+		info->var.red.length = 5;
+		info->var.red.msb_right = 0;
+		info->var.green.offset = 5;
+		info->var.green.length = 6;
+		info->var.green.msb_right = 0;
+		info->var.blue.offset = 0;
+		info->var.blue.length = 5;
+		info->var.blue.msb_right = 0;
+	} else {
+		info->var.red.offset = 16;
+		info->var.red.length = 8;
+		info->var.red.msb_right = 0;
+		info->var.green.offset = 8;
+		info->var.green.length = 8;
+		info->var.green.msb_right = 0;
+		info->var.blue.offset = 0;
+		info->var.blue.length = 8;
+		info->var.blue.msb_right = 0;
+	}
+	info->fix.line_length = (info->var.xres * (info->var.bits_per_pixel >> 3));
+	info->fix.smem_len = info->fix.line_length * info->var.yres;
+
+	/* sgdma descriptor table is located at the end of display memory */
+	fbmem_virt = dma_alloc_coherent(NULL,
+					info->fix.smem_len,
+					(void *)&(info->fix.smem_start),
+					GFP_KERNEL);
+	//__get_free_pages(GFP_KERNEL,10);
+	if (!fbmem_virt) {
+		dev_err(&pdev->dev, "altfb: unable to allocate %ld Bytes fb memory\n",
+			info->fix.smem_len + DISPLAY_DESC_SIZE(info->fix.smem_len));
+		goto err2;
+	}
+
+	info->screen_base = fbmem_virt;
+	info->pseudo_palette = info->par;
+	info->par = NULL;
+	info->flags = FBINFO_FLAG_DEFAULT;
+
+	retval = fb_alloc_cmap(&info->cmap, 256, 0);
+	if (retval < 0)
+		goto err1;
+
+	platform_set_drvdata(pdev, fbdev);
+
+	if (!request_mem_region(fbdev->reg_res->start, resource_size(fbdev->reg_res), pdev->name)) {
+		dev_err(&pdev->dev, "Memory region busy\n");
+		retval = -EBUSY;
+		goto err3;
+	}
+	fbdev->base = ioremap_nocache(fbdev->reg_res->start, resource_size(fbdev->reg_res));
+	if(!fbdev->base) {
+	    dev_err(&pdev->dev, "ioremap failed\n");
+		retval = -EIO;
+		goto err4;
+	}
+	if (fbdev->type->start_hw(fbdev))
+		goto err5;
+
+	printk(KERN_INFO "fb%d: %s frame buffer device at 0x%x+0x%x\n",
+		info->node, info->fix.id, (unsigned)info->fix.smem_start,
+		info->fix.smem_len);
+
+	retval = register_framebuffer(info);
+	if (retval < 0)
+		goto err5;
+	return 0;
+err5:
+	iounmap(fbdev->base);
+err4:
+	release_region(fbdev->reg_res->start, resource_size(fbdev->reg_res));
+err3:
+	dma_free_coherent(NULL, info->fix.smem_len, fbmem_virt,
+			  info->fix.smem_start);
+err2:
+	fb_dealloc_cmap(&info->cmap);
+err1:
+	framebuffer_release(info);
+err:
+    kfree(fbdev);
+	return retval;
+}
+
+static int altfb_remove(struct platform_device *dev)
+{
+	struct altfb_dev *fbdev = platform_get_drvdata(dev);
+
+    if (fbdev) {
+	    iounmap(fbdev->base);
+	    release_region(fbdev->reg_res->start, resource_size(fbdev->reg_res));
+	    if (fbdev->info) {
+		    unregister_framebuffer(fbdev->info);
+		    dma_free_coherent(NULL, fbdev->info->fix.smem_len, fbdev->info->screen_base,
+				      fbdev->info->fix.smem_start);
+		    framebuffer_release(fbdev->info);
+	    }
+	    kfree(fbdev);
+    }
+	return 0;
+}
+
+static struct platform_driver altfb_driver = {
+	.probe = altfb_probe,
+	.remove = altfb_remove,
+	.driver = {
+	    .owner = THIS_MODULE,
+		.name = "altfb",
+		.of_match_table = altfb_match,
+    },
+};
+
+module_platform_driver(altfb_driver);
+
+MODULE_DESCRIPTION("Altera framebuffer driver");
+MODULE_AUTHOR("Thomas Chou <thomas@wytron.com.tw>");
+MODULE_LICENSE("GPL");
-- 
2.7.4

